WARNING

This software is still in alpha stage and lots of things change rapidly
that break backward and forward compatibility. Therefore it is highly
advised against using cloudnbd for any serious purpose.

INTRODUCTION

cloudnbd: A network block device with cloud storage as backend

If you care about your data, you back it up. However, a backup that
can't be restored when you need it is as useless as no backup. You need
to make sure you backup is immune to physical theft, natural disasters
and other causes that results in data loss. You also need to ensure
availability of the data when you need it as well as its integrity. Now,
it's hard to come by all these qualities using an external hard drive
for instance. Cloud storage services such as Google Storage for
Developers and Amazon S3 however provide all the above at a very cheap
price. But it doesn't give you the flexibility of a local hard disk.

cloudnbd is an interface to cloud storage services that acts as a normal
block device. You can format it using your favorite filesystem or use it
in a RAID configuration, etc. Below is the list of features:

  * Full integrity in case of network/power failure (with appropriate
    kernel and filesystem support, this integrity will further apply to
    the state of the FS)
  * Ability to resize a volume after creation
  * Password protection of all data using AES-256 encryption
  * Change of password after creation without re-encryption of data
  * All data is stored in compressed format on the cloud (unless the
    compressed size is larger than the plain data in which case the
    plain data is stored)
  * Support for both FLUSH and TRIM NBD commands

cloudnbd acts as an NBD (Network Block Device) server when run. To
create an actual linux block device, you need nbd-client which is a part
of NBD user-space tools (TCP version) which is most likely shipped with
your distribution.

Here's an example of how to create a new volume on Google Storage for
Developers (GS) (assuming you already have a bucket named
'jennyt-mybackup'), format it with btrfs and mount it on /mnt:

  $ cloudnbd init gs jennyt-mybackup/photos 20GB

Note that 20GB only tells cloudnbd what size to report to nbd-client by
default. It does not actually allocate 20GB on GS. Also, you will be
asked for your access key and secret as well as a password to use for
encryption. 'gs' tells cloudnbd to use Google Storage as the backend.

And now we're ready to format it and mount it locally:

  $ cloudnbd open gs jennyt-mybackup/photos -p 12345
  $ modprobe nbd
  $ nbd-client localhost 12345 /dev/nbd0 -b 4096

That's it. Now the newly created block device '/dev/nbd0' is ready to be
formatted with FS of your choosing:

  $ mkfs.btrfs /dev/nbd0
  $ mount /dev/nbd0 /mnt

When you're done with backing your files up, umount and close the
cloudnbd volume:

  $ umount /mnt
  $ cloudnbd close gs jennyt-mybackup/photos

INSTALLING

Install cloudnbd using the following:

  $ python setup.py install

If you have an rpm based distro and wish to create an rpm package,
create a source distribution archive and use it along with cloudnbd.spec
to create the rpm package:

  $ python setup.py sdist --formats=bztar

USAGE

To find out more about the usage of cloudnbd, consult the man page:

  $ man cloudnbd

BUGS

If you come across any issues, see if you can fix it and send me a
patch. If not, just email me what the issue is. The email address to
send patches and issue descriptions to is mansour@oxplot.com
Any and all contributions will be highly appreciated.

AND ... I would love to hear you using this program to give yourselves
peace of mind =)
